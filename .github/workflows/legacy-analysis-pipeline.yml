name: Legacy Analysis and Requirements Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      source_path:
        description: 'Path to source code (e.g., PolicyManagementJSP)'
        required: true
        default: 'PolicyManagementJSP'
      entity_name:
        description: 'Entity name (e.g., Policy, Account, Patient)'
        required: true
        default: 'Policy'
      industry:
        description: 'Industry (e.g., Insurance, Banking, Healthcare)'
        required: true
        default: 'Insurance'

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run SonarQube
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=PolicyManagementJSP/src/main/java
            -Dsonar.java.binaries=${{ inputs.source_path }}/target

      - name: Install Checkstyle
        run: |
          mvn install -DskipTests -f ${{ inputs.source_path }}/pom.xml
          mvn checkstyle:check -f ${{ inputs.source_path }}/pom.xml
          mv ${{ inputs.source_path }}/target/checkstyle-result.xml reports/checkstyle-report.xml

      - name: Install Hugging Face dependencies
        run: |
          python -m pip install transformers requests

      - name: Run CodeBERT via Hugging Face Inference API
        run: |
          python scripts/codebert_summary.py ${{ inputs.source_path }}/src/main/java
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}

      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: |
            reports/sonar-report.json
            reports/checkstyle-report.xml
            reports/codebert-summary.md

  dynamic-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Supabase CLI
        run: |
          npm install -g @supabase/supabase-js

      - name: Initialize Supabase client
        run: |
          python scripts/setup_supabase.py
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      - name: Analyze SQL queries
        run: |
          python scripts/analyze_queries.py > reports/query-analysis.txt
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      - name: Upload query analysis
        uses: actions/upload-artifact@v4
        with:
          name: query-analysis
          path: reports/query-analysis.txt

  documentation:
    runs-on: ubuntu-latest
    needs: [static-analysis, dynamic-analysis]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install LangChain and Hugging Face dependencies
        run: |
          python -m pip install langchain langchain-huggingface requests

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports
          path: reports/

      - name: Download query analysis
        uses: actions/download-artifact@v4
        with:
          name: query-analysis
          path: reports/

      - name: Generate requirements with LangChain
        run: |
          python scripts/generate_requirements.py \
            --source ${{ inputs.source_path }}/src/main/java \
            --entity ${{ inputs.entity_name }} \
            --industry ${{ inputs.industry }} \
            --output docs/requirements.md
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}

      - name: Generate gap analysis
        run: |
          python scripts/generate_gaps.py \
            --analysis-reports reports/ \
            --output docs/gaps.md

      - name: Generate system inventory
        run: |
          python scripts/generate_inventory.py \
            --source ${{ inputs.source_path }} \
            --output docs/inventory.md

      - name: Commit documentation
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs/
          git commit -m "Add analysis and requirements documentation" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
