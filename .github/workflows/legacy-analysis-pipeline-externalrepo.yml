name: Legacy Analysis and Requirements Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Repository containing source code (e.g., <your-username>/PolicyManagementJSPRepo)'
        required: true
        default: 'dileepmsse/PolicyManagementJSPRepo'
      source_path:
        description: 'Path to source code in repo (e.g., PolicyManagementJSP)'
        required: true
        default: 'PolicyManagementJSP'
      entity_name:
        description: 'Entity name (e.g., Policy, Account, Patient)'
        required: true
        default: 'Policy'
      industry:
        description: 'Industry (e.g., Insurance, Banking, Healthcare)'
        required: true
        default: 'Insurance'

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout evaluation repository
        uses: actions/checkout@v4

      - name: Clone source repository
        run: |
         # Remove existing source_path to avoid conflicts
          rm -rf PolicyManagementJSP
          # Clone with shallow depth
          git clone --depth 1 https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/dileepmsse/PolicyManagementJSPRepo.git source-repo
          # Check if clone succeeded
          if [ ! -d "source-repo" ]; then
            echo "Error: Failed to clone repository ${{ inputs.source_repo }}"
            exit 1
          fi
          # Verify source_path exists in cloned repo
          if [ ! -d "source-repo/PolicyManagementJSP" ]; then
            echo "Error: Source path source-repo/PolicyManagementJSP does not exist"
            exit 1
          fi
          # Move source_path to workspace root
          # mv source-repo/PolicyManagementJSP .
          # Debug cloned contents
          ls -l source-repo/PolicyManagementJSP
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # - name: Validate source path
      #   run: |
      #     if [ ! -d "PolicyManagementJSP/src/main/java" ]; then
      #       echo "Error: Source path PolicyManagementJSP/src/main/java does not exist."
      #       exit 1
      #     fi
      #     if [ ! -f "PolicyManagementJSP/pom.xml" ]; then
      #       echo "Error: Maven POM file PolicyManagementJSP/pom.xml does not exist."
      #       exit 1
      #     fi

      - name: Build Maven
        run: |
          mvn clean install -DskipTests -X -f source-repo/PolicyManagementJSP/pom.xml
        continue-on-error: false

      - name: Debug target directory
        run: |
          ls -l source-repo/PolicyManagementJSP/target || echo "Target directory not found"
          find source-repo/PolicyManagementJSP/target -type f || echo "No files in target"

      - name: Run SonarQube
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=dileepmsse_PolicyManagementJSPRepo
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=source-repo/PolicyManagementJSP/src/main/java
            -Dsonar.java.binaries=source-repo/PolicyManagementJSP/target/classes

      - name: Download SonarQube report
        run: |
          mkdir -p reports
          curl -sSf -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=dileepmsse_PolicyManagementJSPRepo" \
            -o reports/sonar-report.json

      - name: Install Checkstyle
        run: |
          mvn checkstyle:checkstyle -Dcheckstyle.failOnViolation=false -f source-repo/PolicyManagementJSP/pom.xml 
          mkdir -p reports/
          mv source-repo/PolicyManagementJSP/target/checkstyle-result.xml reports/checkstyle-report.xml
      
      - name: Install Hugging Face dependencies
        run: |
          python -m pip install transformers requests
      
      - name: Install openAI
        run: |
          python -m pip install openai
      
      - name: Run CodeBERT via Hugging Face Inference API
        run: |
          python scripts/codebert_summary.py source-repo/PolicyManagementJSP/src/main/java --output reports/codebert-summary.md
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}

      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: |
            reports/sonar-report.json
            reports/checkstyle-report.xml
            reports/codebert-summary.md

  documentation:
    runs-on: ubuntu-latest
    needs: [static-analysis]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone source repository
        run: |
         # Remove existing source_path to avoid conflicts
          rm -rf PolicyManagementJSP
          # Clone with shallow depth
          git clone --depth 1 https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/dileepmsse/PolicyManagementJSPRepo.git source-repo
          # Check if clone succeeded
          if [ ! -d "source-repo" ]; then
            echo "Error: Failed to clone repository ${{ inputs.source_repo }}"
            exit 1
          fi
          # Verify source_path exists in cloned repo
          if [ ! -d "source-repo/PolicyManagementJSP" ]; then
            echo "Error: Source path source-repo/PolicyManagementJSP does not exist"
            exit 1
          fi
          # Move source_path to workspace root
          # mv source-repo/PolicyManagementJSP .
          # Debug cloned contents
          ls -l source-repo/PolicyManagementJSP
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install LangChain and Hugging Face dependencies
        run: |
          python -m pip install langchain langchain-huggingface requests

      - name: Install openAI
        run: |
          python -m pip install openai
          
      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports
          path: reports/
# Pass entity and industry as inputs using parameters. For example, if entity is "Policy" and industry is "Insurance", use:
      - name: Generate requirements with LangChain
        run: |
          python scripts/generate_requirements.py \
            --source source-repo/PolicyManagementJSP/src/main/java \
            --entity Policy \
            --industry Industry \
            --output docs/requirements.md
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}

      - name: Generate gap analysis
        run: |
          python scripts/generate_gaps.py \
            --analysis-reports reports/ \
            --output docs/gaps.md \
            --entity-name policy \
            --industry Insurance
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}

      - name: Generate system inventory
        run: |
          python scripts/generate_inventory.py \
            --source source-repo/PolicyManagementJSP \
            --output docs/inventory.md
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}

      - name: Commit documentation
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Add analysis and requirements documentation" || echo "No changes to commit"
          git pull --rebase origin main || echo "No changes to pull"
          # Force push to avoid conflicts
          git push origin main --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}